# Generated by Django 5.2.1 on 2025-06-24 18:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
import users.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('notes', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=users.models.user_profile_picture_path)),
                ('student_id', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message="Student ID must be in the format: 'XXX-XXX-XXX' (e.g., 222-115-141).", regex='^\\d{3}-\\d{3}-\\d{3}$')])),
                ('batch', models.CharField(blank=True, max_length=20, null=True)),
                ('section', models.CharField(blank=True, max_length=10, null=True)),
                ('bio', models.TextField(blank=True, help_text='A short biography about the user.', max_length=500, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Mobile number must be entered in the format: '+999999999' or '017XXXXXXXXX'. Up to 15 digits allowed, optional country code.", regex='^\\+?(\\d{1,3})?\\d{9,15}$')])),
                ('university', models.CharField(blank=True, max_length=255, null=True)),
                ('website', models.URLField(blank=True, help_text='Personal or professional website URL.', max_length=255, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=100, null=True)),
                ('department', models.ForeignKey(blank=True, help_text="User's primary department", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='notes.department')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('skills', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of skills (e.g., Python, Django, React).', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
